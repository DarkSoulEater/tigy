<comment> ::= "/*" {<char> | <comment>} "*/"
<letter> ::= "a" ... "z" | "A" ... "Z"
<digit> ::= "0" ... "9"
<id> ::= <letter> | <id> (<digit> | <letter> | "_")
<string-constant> ::= '"' {<char>} '"'
<integer-constant> ::= <digit> | <integer-constant> <digit>
<float-constant> ::= <integer-constant> "." <integer-constant>
<punctuator> ::= "," | ":" | ";" | "(" | ")" | "[" | "]" | "{" | "}" | "."
               | "+" | "-" | "*" | "/" | "=" | "<>" | "<" | "<=" | ">" | ">="
               | "&" | "|" | ":="
<type-id> ::= "int" | "string" | "float" | "user-defined-type"
<keyword> ::= "array" | "break" | "do" | "else" | "end" | "for" | "function"
            | "if" | "in" | "let" | "nil" | "of" | "then" | "to" | "type"
            | "var" | "while"

<program> ::= <expr>
<expr> ::= <string-constant>
         | <integer-constant>
         | <float-constant>
         | "nil"
         | <lvalue>
         | "-" <expr>
         | <expr> <binary-operator> <expr>
         | <lvalue> ":=" <expr>
         | <id> "(" [<expr-list>] ")"
         | "(" [<expr-seq>] ")"
         | <type-id> "{" [<field-list>] "}"
         | <type-id> "[" <expr> "]" "of" <expr>
         | "if" <expr> "then" <expr> ["else" <expr>]
         | "while" <expr> "do" <expr>
         | "for" <id> ":=" <expr> "to" <expr> "do" <expr>
         | "break"
         | "let" <declaration-list> "in" [<expr-seq>] "end"
<lvalue> ::= <id> | <lvalue> "." <id> | <lvalue> "[" <expr> "]"
<binary-operator> ::= "+" | "-" | "*" | "/" | "=" | "<>" | "<" | "<=" | ">"
                    | ">=" | "&" | "|"
<expr-seq> ::= <expr> | <expr-seq> ";" <expr>
<expr-list> ::= <expr> | <expr-list> "," <expr>
<field-list> ::= <id> "=" <expr> | <field-list> "," <id> "=" <expr>
<declaration-list> ::= <declaration> | <declaration-list> <declaration>
<declaration> ::= <type-declaration>
                | <variable-declaration>
                | <function-declaration>
<type-declaration> ::= "type" <type-id> "=" <type>
<variable-declaration> ::= "var" <id> [":" <type-id>] ":=" <expr>
<function-declaration> ::= "function" <id> "(" [<type-fields>] ")"
                           [":" <type-id>] "=" <expr>
<type> ::= <type-id> | "{" [<type-fields>] "}" | "array" "of" <type-id>
<type-fields> ::= <id> ":" <type-id> | <type-fields> "," <id> ":" <type-id>
